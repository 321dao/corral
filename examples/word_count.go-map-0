package	1
main	1
import	1
(	1
"fmt"	1
"strconv"	1
"strings"	1
"github.com/bcongdon/corral"	1
)	1
type	1
wordCount	1
struct{}	1
func	1
(w	1
wordCount)	1
Map(key,	1
value	1
string,	1
emitter	1
corral.Emitter)	1
{	1
fmt.Println("Inside	1
mapper")	1
for	1
_,	1
word	1
:=	1
range	1
strings.Fields(value)	1
{	1
emitter.Emit(word,	1
strconv.Itoa(1))	1
}	1
}	1
func	1
(w	1
wordCount)	1
Reduce(key	1
string,	1
values	1
corral.ValueIterator,	1
emitter	1
corral.Emitter)	1
{	1
count	1
:=	1
0	1
for	1
_	1
=	1
range	1
values.Iter()	1
{	1
count++	1
}	1
emitter.Emit(key,	1
strconv.Itoa(count))	1
}	1
func	1
main()	1
{	1
wc	1
:=	1
wordCount{}	1
job	1
:=	1
corral.Job{	1
Map:	1
wc,	1
Reduce:	1
wc,	1
}	1
job.Main()	1
}	1
